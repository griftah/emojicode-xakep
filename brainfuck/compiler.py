# coding=utf-8

import codecs
import subprocess
import os

from brainfuck import Brainfuck

class Compiler(Brainfuck):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã commands[char] = (src, src_arg, indent)
    # src - –∏—Å—Ö–æ–¥–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã Brainfuck –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ.
    # src_arg - –∏—Å—Ö–æ–¥–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º. —Ç—Ä–µ–±—É–µ—Ç %d
    # tabs - —Å–¥–≤–∏–≥.
    commands = {}

    def __init__(self, brainfuck=None, optimize=True):
        super(Compiler, self).__init__(brainfuck, optimize)
        for char, (src, src_arg, tabs) in self.commands.iteritems():
            src_has_arg = src.find('%d')>0 if src else 0
            self.commands[char] = (
                src%1 if src_has_arg else src,
                src_arg if src_arg else src,
                tabs
            )
        self.output = []

    # –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–∞–π–ª f
    def write(self, f):
        indent = 0
        def w(f, src, indent):
            if src:
                f.write((u'\n'+src).replace(u'\n', u'\n'+u'\t'*indent))

        for char, arg in self.code:
            try:
                src, src_arg, tabs = self.commands[char]
                if tabs:
                    w(f, src, indent)
                    indent+=tabs
                elif arg>1:
                    w(f, src_arg%arg, indent)
                else:
                    w(f, src, indent)
            except KeyError:
                pass
        f.write('\n')

    # –∑–∞–≥—Ä—É–∂–∞–µ—Ç, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ –¥—Ä—É–≥–æ–π —è–∑—ã–∫, –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—ã
    def compile(self, name, optimize=True):
        # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞
        with codecs.open(name, 'r', 'utf-8') as f:
            self.load(f.read(), optimize)
        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –±—Ä–µ–π–Ω—Ñ–∞–∫ –≤ –¥—Ä—É–≥–æ–π —è–∑—ã–∫
        self.output = [(name[:-2] if name.endswith('.b') else name)+self.ext]
        with codecs.open(self.output[-1], 'w', 'utf-8') as f:
            self.write(f)
        # –∑–∞–ø—É—Å–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—ã
        self.prepare()

    def prepare(self): pass

    def run(self):
        if self.output: # —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ compile
            subprocess.call(self.run_cmd%self.output[-1], shell=True)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    def clean(self):
        for name in self.output:
            if os.path.exists(name):
                subprocess.call(u'rm %s'%name, shell=True)


class PythonCompiler(Compiler):
    commands = {
        'begin': (u'''# coding=utf-8
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Brainfuck.
from sys import stdout
tape = [0]*32000
xc = 0''', None, 0),
        '+': (u'tape[xc]+=%d', None, 0),
        '-': (u'tape[xc]-=%d', None, 0),
        '.': (u'stdout.write(chr(tape[xc])); stdout.flush()', None, 0),
        '>': (u'xc+=%d', None, 0),
        '<': (u'xc-=%d', None, 0),
        '[': (u'while tape[xc]:', None, 1),
        ']': (None, None, -1)
    }
    ext = '.py'
    run_cmd = 'python %s'


class EmojicodeCompiler(Compiler):
    commands = {
        'begin': (u'''üë¥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Brainfuck.
üì¶ files üî¥

üêã üöÇ üçá
    üêñ üé© ‚û° üî£ üçá
        üçé üç∫ üî¨ üî§?????????‚ùåt‚ùån??‚ùår?????????????????? !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~üî§ üêï
    üçâ
üçâ

üèÅ üçá
    üç¶ stdout üç©üì§üìÑ
    üç¶ tape üî∑ üç®üêöüöÇ üêß 32000
    üçÆ xc 0

    üîÇ i ‚è© 1 32000 üçá
        üêª tape 0
    üçâ
''', None, 1),
        '+': (u'üê∑ tape xc ‚ûï üç∫ üêΩ tape xc %d', None, 0),
        '-': (u'üê∑ tape xc ‚ûñ üç∫ üêΩ tape xc %d', None, 0),
        '.': (u'‚úè stdout üìá üî° üé© üç∫ üêΩ tape xc', None, 0),
        '>': (u'üç´ xc', u'üçÆ xc ‚ûï xc %d', 0),
        '<': (u'üç≥ xc', u'üçÆ xc ‚ûñ xc %d', 0),
        '[': (u'üîÅ ‚ùé üòõ üç∫ üêΩ tape xc 0 üçá', None, 1),
        ']': (u'üçâ', None, -1),
        'end': (u'üçâ', None, -1)
    }
    ext = '.emojic'
    run_cmd = 'emojicode %s'

    def prepare(self):
        subprocess.call('emojicodec %s'%self.output[-1], shell=True)
        self.output.append(self.output[-1].replace('.emojic', '.emojib'))


class CCompiler(Compiler):
    commands = {
        'begin': (u'''/* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Brainfuck. */
#include <stdio.h>
int main(int argc, char **argv) {
    int tape[32768];
    int xc = 0;
''', None, 1),
        '+': (u'tape[xc]++;', u'tape[xc]+=%d;', 0),
        '-': (u'tape[xc]--;', u'tape[xc]-=%d;', 0),
        '.': (u'putchar(tape[xc]);', None, 0),
        '>': (u'xc++;', u'xc+=%d;', 0),
        '<': (u'xc--;', u'xc-=%d;', 0),
        '[': (u'while (tape[xc]) {', None, 1),
        ']': (u'}', None, -1),
        'end': (u'return 0;\n}', None, -1)
    }
    ext = '.c'
    run_cmd = './%s'

    def prepare(self):
        self.output.append(self.output[-1].replace('.c', '.out'))
        subprocess.call('cc %s -o %s'%(self.output[-2], self.output[-1]), shell=True)


class JavascriptCompiler(Compiler):
    commands = {
        'begin': (u'''// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Brainfuck.
stdout = process.stdout
tape = Array.apply(null, Array(32000)).map(Number.prototype.valueOf,0);
xc = 0''', None, 0),
        '+': (u'tape[xc]++;', u'tape[xc]+=%d;', 0),
        '-': (u'tape[xc]--;', u'tape[xc]-=%d;', 0),
        '.': (u'stdout.write(String.fromCharCode(tape[xc]));', None, 0),
        '>': (u'xc++;', u'xc+=%d;', 0),
        '<': (u'xc--;', u'xc-=%d;', 0),
        '[': (u'while (tape[xc]) {', None, 1),
        ']': (u'}', None, -1),
        'end': (u'stdout.write("\\r");', None, -1)
    }
    ext = '.js'
    run_cmd = 'node %s'


class RubyCompiler(Compiler):
    commands = {
        'begin': (u'''# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Brainfuck.
tape = Array.new(32000, 0)
xc = 0''', None, 0),
        '+': (u'tape[xc]+=%d', None, 0),
        '-': (u'tape[xc]-=%d', None, 0),
        '.': (u'STDOUT.write(tape[xc].chr)', None, 0),
        '>': (u'xc+=%d', None, 0),
        '<': (u'xc-=%d', None, 0),
        '[': (u'while tape[xc]!=0 do', None, 1),
        ']': (u'end', None, -1)
    }
    ext = '.rb'
    run_cmd = 'ruby %s'


class JavaCompiler(Compiler):
    commands = {
        'begin': (u'''
public class Brainfuck {
   public static void main(String[] args) {
      int[] tape = new int[32000];
      int xc = 0;
      java.util.Arrays.fill(tape, 0);
''', None, 2),
        '+': (u'tape[xc]++;', u'tape[xc]+=%d;', 0),
        '-': (u'tape[xc]--;', u'tape[xc]-=%d;', 0),
        '.': (u'System.out.print((char)tape[xc]);', None, 0),
        '>': (u'xc++;', u'xc+=%d;', 0),
        '<': (u'xc--;', u'xc-=%d;', 0),
        '[': (u'while (tape[xc]!=0) {', None, 1),
        ']': (u'}', None, -1),
        'end': (u'\n}\n}', None, -2)
    }
    ext = '.java'
    run_cmd = 'java %s'

    def prepare(self):
        subprocess.call('mv %s Brainfuck.java'%self.output.pop(), shell=True)
        subprocess.call('javac Brainfuck.java', shell=True)
        self.output = ['Brainfuck.java', 'Brainfuck.class', 'Brainfuck']
