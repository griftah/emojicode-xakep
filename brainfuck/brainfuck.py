#!/usr/bin/env python
# coding=utf-8

import sys

class Brainfuck(object):
    def __init__(self, brainfuck=None, optimize=True):
        if brainfuck:
            self.load(brainfuck, optimize)

    def load(self, brainfuck, optimize=True):
        chars = ['begin']
        args = [1]
        brackets = []
        for char in brainfuck:
            if char in '[]<>.,+-':
                if optimize and char in '<>+-' and char==chars[-1]:
                    args[-1]+=1
                else:
                    chars.append(char); args.append(1)
                    if char=='[':
                        brackets.append(len(chars)-1)
                    elif char==']':
                        left = brackets.pop()
                        args[left] = len(chars)-1
                        args[-1] = left
        chars.append('end'); args.append(1)
        self.code = zip(chars, args)

    def run(self):
        code = self.code
        tape = [0]*30000
        pc = xc = 0
        prog_len = len(code)
        while pc<prog_len:
            char, arg = code[pc]
            if char=='+':
                tape[xc]+=arg
            elif char=='-':
                tape[xc]-=arg
            elif char=='>':
                xc+=arg
            elif char=='<':
                xc-=arg
            elif char=='.':
                sys.stdout.write(chr(tape[xc]))
                sys.stdout.flush()
            elif char==']' and tape[xc]:
                pc = arg
            elif char=='[' and tape[xc]==0:
                pc = arg
            pc+=1


class Compiler(Brainfuck):
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã commands[char] = (src, src_arg, indent)
    # src - –∏—Å—Ö–æ–¥–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã Brainfuck –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ.
    # src_arg - –∏—Å—Ö–æ–¥–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º. —Ç—Ä–µ–±—É–µ—Ç %d
    # tabs - —Å–¥–≤–∏–≥.
    commands = {}

    def __init__(self, brainfuck=None, optimize=True):
        super(Compiler, self).__init__(brainfuck, optimize)
        for char, (src, src_arg, tabs) in self.commands.iteritems():
            src_has_arg = src.find('%d')>0 if src else 0
            self.commands[char] = (
                src%1 if src_has_arg else src,
                src_arg if src_arg else src,
                tabs
            )

    def write(self, f, src, indent):
        if src:
            f.write((u'\n'+src).replace(u'\n', u'\n'+u'\t'*indent))

    def compile(self, f):
        indent = 0
        for char, arg in self.code:
            try:
                src, src_arg, tabs = self.commands[char]
                if tabs:
                    self.write(f, src, indent)
                    indent+=tabs
                elif arg>1:
                    self.write(f, src_arg%arg, indent)
                else:
                    self.write(f, src, indent)
            except KeyError:
                pass
        f.write('\n')


class PythonCompiler(Compiler):
    commands = {
        'begin': (u'''# coding=utf-8
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Brainfuck.
from sys import stdout
tape = [0]*32000
xc = 0''', None, 0),
        '+': (u'tape[xc]+=%d', None, 0),
        '-': (u'tape[xc]-=%d', None, 0),
        '.': (u'stdout.write(chr(tape[xc])); stdout.flush()', None, 0),
        '>': (u'xc+=%d', None, 0),
        '<': (u'xc-=%d', None, 0),
        '[': (u'while tape[xc]:', None, 1),
        ']': (None, None, -1)
    }


class EmojicodeCompiler(Compiler):
    commands = {
        'begin': (u'''üë¥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Brainfuck.
üì¶ files üî¥

üêã üöÇ üçá
    üêñ üé© ‚û° üî£ üçá
        üçé üç∫ üî¨ üî§?????????‚ùåt‚ùån??‚ùår?????????????????? !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~üî§ üêï
    üçâ
üçâ

üèÅ üçá
    üç¶ stdout üç©üì§üìÑ
    üç¶ tape üî∑ üç®üêöüöÇ üêß 32000
    üçÆ xc 0

    üîÇ i ‚è© 1 32000 üçá
        üêª tape 0
    üçâ
''', None, 1),
        '+': (u'üê∑ tape xc ‚ûï üç∫ üêΩ tape xc %d', None, 0),
        '-': (u'üê∑ tape xc ‚ûñ üç∫ üêΩ tape xc %d', None, 0),
        '.': (u'‚úè stdout üìá üî° üé© üç∫ üêΩ tape xc', None, 0),
        '>': (u'üç´ xc', u'üçÆ xc ‚ûï xc %d', 0),
        '<': (u'üç≥ xc', u'üçÆ xc ‚ûñ xc %d', 0),
        '[': (u'üîÅ ‚ùé üòõ üç∫ üêΩ tape xc 0 üçá', None, 1),
        ']': (u'üçâ', None, -1),
        'end': (u'üçâ', None, -1)
    }


class CCompiler(Compiler):
    commands = {
        'begin': (u'''/* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Brainfuck. */
#include <stdio.h>
int main(int argc, char **argv) {
    int tape[32768];
    int xc = 0;
''', None, 1),
        '+': (u'tape[xc]++;', u'tape[xc]+=%d;', 0),
        '-': (u'tape[xc]--;', u'tape[xc]-=%d;', 0),
        '.': (u'putchar(tape[xc]);', None, 0),
        '>': (u'xc++;', u'xc+=%d;', 0),
        '<': (u'xc--;', u'xc-=%d;', 0),
        '[': (u'while (tape[xc]) {', None, 1),
        ']': (u'}', None, -1),
        'end': (u'putchar(10); return 0; }', None, -1)
    }



if __name__=='__main__':
    import codecs
    import subprocess
    from timeit import default_timer as timer

    source_filename = None
    optimize = False
    lang = None
    run = True          # –∏—Å–ø–æ–ª–Ω—è—Ç—å
    t = 0

    compilers = {
        'python':    ( PythonCompiler, '.py', 'python %s'),
        'emojicode': ( EmojicodeCompiler, '.emojic', 'emojicode %s'),
        'c':         ( CCompiler, '.c', './%s')
    }

    for arg in sys.argv[1:]:
        if arg=='-o':
            optimize = True
        elif arg=='.':
            run = False
        elif arg.endswith('.b'):
            source_filename = arg
        elif compilers.has_key(arg):
            lang = arg

    if source_filename:
        with codecs.open(source_filename, 'r', 'utf-8') as f:
            source = f.read()
        if lang:
            compiler, ext, run_cmd = compilers[lang]

            # –∫–æ–º–ø–∏–ª—è—Ü–∏—è
            output = [source_filename.replace('.b', ext)]
            with codecs.open(output[-1], 'w', 'utf-8') as f:
                compiler(source, optimize).compile(f)

            # —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
            if lang=='emojicode':
                subprocess.call('emojicodec %s'%output[-1], shell=True)
                output.append(source_filename.replace('.b', '.emojib'))
            elif lang=='c':
                output.append(source_filename.replace('.b', '.out'))
                subprocess.call(
                    'cc %s -o %s'%(output[0], output[1]), shell=True)

            # –∑–∞–ø—É—Å–∫
            if run:
                t0 = timer()
                subprocess.call(run_cmd%output[-1], shell=True)
                t = timer()-t0
                # –£–¥–∞–ª–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                for name in output:
                    subprocess.call(u'rm %s'%name, shell=True)
            else:
                print source_filename, '->', ' -> '.join(output)
        else:
            t0 = timer()
            Brainfuck(source, optimize).run()
            t = timer()-t0

        # –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        if t:
            print '\nt = %.3f s'%t
    else:
        for example, comment in (
            ('%s source.b', '–∏—Å–ø–æ–ª–Ω–∏—Ç—å source.b –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–æ–º'),
            ('%s -o source.b', '-o –≤–∫–ª—é—á–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é'),
            ('%s python source.b', '–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ Python –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å'),
            ('%s emojicode source.b', '–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ Emojicode –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å'),
            ('%s c source.b', '–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ C –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å'),
            ('%s python source.b .', '—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–∏–∫ –∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å'),
        ):
            print example.ljust(25)%__file__, comment
